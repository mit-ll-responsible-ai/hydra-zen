[build-system]
requires = [ "setuptools >= 35.0.2", "wheel >= 0.29.0", "versioneer[toml]==0.26"]
build-backend = "setuptools.build_meta"

[project]
name = "hydra_zen"
dynamic = ["version"]
description = "Configurable, reproducible, and scalable workflows in Python, via Hydra"
readme = """
hydra-zen is a Python library that simplifies the process of writing code (research-grade or production-grade) that is:

- **Configurable**: you can configure all aspects of your code from a single interface (the command line or a single Python function).
- **Repeatable**: each run of your code will be self-documenting; the full configuration of your software is saved alongside your results.
- **Scalable**: launch multiple runs of your software, be it on your local machine or across multiple nodes on a cluster.

It builds off – and is fully compatible with – Hydra, a framework for elegantly
 configuring complex applications.

hydra-zen helps simplify the process of using Hydra by providing convenient functions
for creating and validating configs, as well as launching Hydra jobs. It also provides
novel functionality such as wrapped instantiation and meta fields in configs.
"""

requires-python = ">=3.7"
license = {file = "LICENSE.txt"}
keywords= [ "machine learning", "research", "configuration", "scalable", "reproducible", "yaml", "Hydra", "dataclass"]  # Optional
authors = [
  {name = "Justin Goodwin", email = "jgoodwin@ll.mit.edu" },
  {name = "Ryan Soklaski", email = "ryan.soklaski@ll.mit.edu" },
]
maintainers = [
  {name = "Ryan Soklaski", email = "ryan.soklaski@ll.mit.edu" },
]

classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering",
    "Programming Language :: Python :: 3 :: Only",
]

dependencies=[
  "hydra-core >= 1.1.0",
  "typing-extensions >= 4.1.0",
]

[project.optional-dependencies]
test = [
    "pytest >= 3.8",
    "hypothesis >= 6.28.0",
]
pydantic = ["pydantic>=1.8.2"]
beartype = ["beartype>=0.8.0"]

[project.urls]
"Homepage" = "https://mit-ll-responsible-ai.github.io/hydra-zen/"
"Bug Reports" = "https://github.com/mit-ll-responsible-ai/hydra-zen/issues"
"Source" = "https://github.com/mit-ll-responsible-ai/hydra-zen"


[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["hydra_zen.tests*", "hydra_zen.tests.*"]

[tool.setuptools.package-data]
hydra_zen = ["py.typed"]

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "src/hydra_zen/_version.py"
versionfile_build = "hydra_zen/_version.py"
tag_prefix = "v"
parentdir_prefix = "hydra_zen-"

[tool.isort]
known_first_party = ["hydra_zen", "tests"]
profile = "black"
multi_line_output = 3

[tool.coverage.report]
omit = "src/hydra_zen/_version.py"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37, py38, py39, py310, ml-env

[gh-actions]
python =
  3.7: py37
  3.8: py38
  3.9: py38
  3.10: py310


[testenv]
deps = pytest
       hypothesis
commands = pytest \
           {posargs}


[testenv:min-deps]  # test against minimum dependency versions
deps = hydra-core==1.1.0
       omegaconf==2.1.1
       typing-extensions==4.1.0
       {[testenv]deps}
basepython = python3.7


[testenv:pre-release]  # test against pre-releases of dependencies
pip_pre = true
deps = {[testenv]deps}
       pydantic
       beartype
       cloudpickle
basepython = python3.8

[testenv:hydra-1p1p2-pre-release]  # test against pre-releases of dependencies
pip_pre = true
deps = hydra-core==1.1.2
       {[testenv]deps}
       pydantic
       beartype
       cloudpickle
basepython = python3.8

[testenv:omegaconf-2p2p2]  # guard against regressions for type sanitization
pip_pre = true
deps = omegaconf==2.2.2
       {[testenv]deps}
       pydantic
       beartype
       cloudpickle
basepython = python3.8

[testenv:coverage]
setenv = NUMBA_DISABLE_JIT=1
usedevelop = true
basepython = python3.8
deps = {[testenv]deps}
       coverage
       pytest-cov
       numpy
       pydantic
       beartype
       cloudpickle
commands = pytest --cov-report term-missing --cov-config=setup.cfg --cov-fail-under=100 --cov=hydra_zen tests


[testenv:third-party]
install_command = pip install --upgrade --upgrade-strategy eager {opts} {packages}
basepython = python3.8
deps = {[testenv]deps}
       torch
       pytorch-lightning
       numpy
       jaxlib
       jax
       pydantic
       beartype


[testenv:format]
deps =
    autoflake
    black
    isort
commands =
    autoflake --recursive --in-place --remove-duplicate-keys --remove-unused-variables .
    isort .
    black .
"""