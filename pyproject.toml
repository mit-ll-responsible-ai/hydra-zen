[project]
name = "hydra_zen"
dynamic = ["version"]
description = "Configurable, reproducible, and scalable workflows in Python, via Hydra"
readme = "README.md"
requires-python = ">=3.9,<3.14"
dependencies = [
       "hydra-core >= 1.2.0",
       "omegaconf >= 2.2.3",
       "typing-extensions >= 4.1.0, !=4.6.0",
]
license = { text = "MIT" }
keywords = [
       "machine learning",
       "research",
       "configuration",
       "scalable",
       "reproducible",
       "yaml",
       "Hydra",
       "dataclass",
]
authors = [
       { name = "Ryan Soklaski", email = "rsoklaski@gmail.com" },
       { name = "Justin Goodwin", email = "jgoodwin@ll.mit.edu" },
]
maintainers = [{ name = "Justin Goodwin", email = "jgoodwin@ll.mit.edu" }]
classifiers = [
       "Development Status :: 4 - Beta",
       "License :: OSI Approved :: MIT License",
       "Operating System :: OS Independent",
       "Intended Audience :: Science/Research",
       "Programming Language :: Python :: 3.9",
       "Programming Language :: Python :: 3.10",
       "Programming Language :: Python :: 3.11",
       "Programming Language :: Python :: 3.12",
       "Programming Language :: Python :: 3.13",
       "Topic :: Scientific/Engineering",
       "Programming Language :: Python :: 3 :: Only",
]

[dependency-groups]
dev = [
    "pytest>=3.9",
    "hypothesis>=6.28.0",
    "pytest-trio>=0.8.0",
    "pyright>=1.1.404",
    "ruff>=0.12.10",
    "tox>=4.28.4",
    "tox-uv>=1.28.0",
    "tzdata>=2025.2",
    "pytest-xdist>=3.8.0",
    "pytest-cov>=6.2.1",
    "pre-commit>=4.3.0",
]
docs = [
       "sphinx>=8.1.3; python_version >= '3.11'",
       "pydata-sphinx-theme>=0.16.1; python_version >= '3.11'",
       "numpydoc>=1.9.0; python_version >= '3.11'",
       "sphinx-copybutton>=0.5.2; python_version >= '3.11'",
       "sphinx-design>=0.6.1; python_version >= '3.11'",
       "sphinx-codeautolink>=0.17.4; python_version >= '3.11'",
       "sphinx_favicon>=1.0.1; python_version >= '3.11'",
]
third_party = [
    "torch==2.8.0+cpu",
    "lightning>=2.0.0",
    "numpy>1.25.2",
    "jax>=0.4.0",
    "submitit>=1.2.0",
    "hydra-submitit-launcher>=1.2.0",
]

[project.optional-dependencies]
pydantic = ["pydantic>=1.10.14,<3.0.0"]
beartype = ["beartype>=0.8.0"]

[project.urls]
"Homepage" = "https://mit-ll-responsible-ai.github.io/hydra-zen/"
"Bug Reports" = "https://github.com/mit-ll-responsible-ai/hydra-zen/issues"
"Source" = "https://github.com/mit-ll-responsible-ai/hydra-zen"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }

[tool.hatch.build.hooks.vcs]
version-file = "src/hydra_zen/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/hydra_zen"]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.uv.sources]
torch = [
    { index = "pytorch-cpu" }
]

[tool.ruff]
line-length = 88
target-version = "py313"
ignore = [
    "F811",   # Redefined while unused
    "E203",   # Whitespace before ':' (handled by formatter)
    "E501",   # Line too long (handled by formatter)
    "E721",   # Do not compare types, use isinstance()
    "F403",   # 'from module import *' used; unable to detect undefined names
    "F405",   # Name may be undefined, or defined from star imports
    "E701",   # Multiple statements on one line (colon)
]
select = ["E", "F", "W"]

[tool.ruff.lint.per-file-ignores]
# Equivalent to flake8 exclude: tests/annotations/*, tests/test_py310.py
"tests/annotations/*" = ["E", "F", "W", "D"]
"tests/test_py310.py" = ["E", "F", "W", "D"]

[tool.ruff.lint.isort]
# Equivalent to isort configuration
known-first-party = ["hydra_zen", "tests"]
combine-as-imports = true

[tool.ruff.format]
# Black-compatible formatting
quote-style = "double"
indent-style = "space"
line-ending = "auto"


[tool.coverage.run]
branch = true
omit = ["tests/test_docs_typecheck.py"]

[tool.coverage.report]
omit = ["src/hydra_zen/_version.py"]
exclude_lines = [
       'pragma: no cover',
       'def __repr__',
       'raise NotImplementedError',
       'class .*\bProtocol(\[.+\])?\):',
       '@(abc\.)?abstractmethod',
       '@(typing\.)?overload',
       'except ImportError:',
       'except ModuleNotFoundError:',
       'if (typing\.)?TYPE_CHECKING:',
       'if sys\.version_info',
]

[tool.pytest.ini_options]
xfail_strict = true
trio_mode = true


[tool.pyright]
include = ["src"]
reportUnnecessaryTypeIgnoreComment = true
reportUnnecessaryIsInstance = false


[tool.codespell]
skip = 'docs/build/*'

[tool.tox]
requires = ["tox>=4.20"]
env_list = ["3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
description = """
Runs test suite parallelized in the specified python environment and
against number of available processes (up to 4).
Run `tox -e 3.9 -- -n 0` to run tests in a python 3.9 with
parallelization disabled.
"""
uv_sync_locked = true
dependency_groups = ["third_party", "dev"]
extras = ["pydantic", "beartype"]
commands = [["uv", "run", "pytest", "tests/", "-n", "auto", "--maxprocesses=4"]]

[tool.tox.env.min_deps]
runner = "uv-venv-lock-runner"
uv_resolution = "lowest-direct"
uv_sync_locked = false
base_python = ["python3.12"]
dependency_groups = ["dev"]
description = "Runs test suite against minimum supported versions of dependencies"
commands = [
    ["uv", "run", "pytest", "tests/", "-n", "auto", "--maxprocesses=4"]
]

[tool.tox.env.coverage]
description = """
Runs test suite and measures test-coverage. Fails if coverage is
below 100 percent. Run `tox -e coverage -- -n 0` to disable parallelization.
"""

commands = [
    ["uv", "run", "pytest", "--cov=hydra_zen", "--cov-config", "pyproject.toml", "--cov-report", "term-missing", "--cov-fail-under=100", "tests/", "-n", "auto", "--maxprocesses=4"]
]


[tool.tox.env.pyright]
description = """
Ensure that hydra-zen's source code and test suite scan clean
under pyright, and that hydra-zen's public API has a 100 percent
type-completeness score.
"""
commands = [
    ["uv", "run", "pyright", "tests/annotations/", "src/", "--level=error"],
    ["uv", "run", "pyright", "--ignoreexternal", "--verifytypes", "hydra_zen"]
]

[tool.tox.env.hooks]
description = "run code formatter and linter (auto-fix)"
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure"]]


[tool.tox.env.build_docs]
runner = "uv-venv-lock-runner"
description = """
Uses Sphinx to generate html for the hydra-zen's docs. Stores the
results in `.tox/docs/build/html/`.
"""
dependency_groups = ["docs"]
extras = ["pydantic", "beartype"]
change_dir = "docs"
commands = [
    ["uv", "run", "sphinx-build", "-b", "html", "-d", "{env_tmp_dir}/doctrees", "./source", "{env_dir}/build/html"]
]
